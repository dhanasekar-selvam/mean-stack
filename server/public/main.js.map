{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/angular-login.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/change-password/change-password.component.ts","./src/app/change-password/change-password.component.html","./src/app/expired/expired.component.ts","./src/app/expired/expired.component.html","./src/app/forgot-password/forgot-password.component.ts","./src/app/forgot-password/forgot-password.component.html","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/profile/profile.component.ts","./src/app/profile/profile.component.html","./src/app/signup/signup.component.ts","./src/app/signup/signup.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularLoginService {\n  user: any = [];\n  constructor(private http: HttpClient) { }\n  uri = 'http://localhost:3000/api/auth';\n  addUser(data) {\n    console.log(data)\n    return this.http.post(`${this.uri}/signup`, data);\n  }\n  login(data) {\n    console.log(data)\n    return this.http.post(`${this.uri}/login`, data);\n\n  }\n  forgotPwd(data) {\n    console.log(data);\n    return this.http.post(`${this.uri}/forgotpassword`, data);\n  }\n  pwdChange(data) {\n    console.log(data);\n    return this.http.post(`${this.uri}/passwordchange`, data);\n  }\n  resentmail(data) {\n    console.log(data);\n    return this.http.post(`${this.uri}/resentemail`, { email: data });\n  }\n\n}\n","import { ExpiredComponent } from './expired/expired.component';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { HeaderComponent } from './header/header.component';\nimport { NgModule, Component } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { ProfileComponent } from './profile/profile.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: '',\n    component: HeaderComponent,\n    children: [\n      { path: 'home', component: HomeComponent }\n    ]\n  },\n  {\n    path: '',\n    component: HeaderComponent,\n    children: [\n      { path: 'profile', component: ProfileComponent }\n    ]\n  },\n  {\n    path: 'forgot',\n    component: ForgotPasswordComponent,\n  },\n  {\n    path: 'expired',\n    component: ExpiredComponent,\n  },\n  {\n    path: 'passwordchange',\n    component: ChangePasswordComponent,\n  },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes), RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { SlimLoadingBarService } from 'ng2-slim-loading-bar';\nimport {\n  NavigationCancel,\n  Event,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router\n} from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'angularlogin';\n  constructor(private loadingBar: SlimLoadingBarService, private router: Router) {\n    this.router.events.subscribe((event: Event) => {\n      this.navigationInterceptor(event);\n    });\n  }\n  private navigationInterceptor(event: Event): void {\n    if (event instanceof NavigationStart) {\n      this.loadingBar.start();\n    }\n    if (event instanceof NavigationEnd) {\n      this.loadingBar.complete();\n    }\n    if (event instanceof NavigationCancel) {\n      this.loadingBar.stop();\n    }\n    if (event instanceof NavigationError) {\n      this.loadingBar.stop();\n    }\n  }\n}\n","<ng2-slim-loading-bar color=\"red\"></ng2-slim-loading-bar>\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { HomeComponent } from './home/home.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { MatRadioModule } from \"@angular/material/radio\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatNativeDateModule } from \"@angular/material/core\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { MatTabsModule } from \"@angular/material/tabs\";\nimport { AngularLoginService } from './angular-login.service';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { ToastrModule } from 'ngx-toastr';\nimport { SlimLoadingBarModule } from 'ng2-slim-loading-bar';\n\n\nimport {\n  MatDialogModule,\n  MAT_DIALOG_DEFAULT_OPTIONS,\n} from \"@angular/material/dialog\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { HeaderComponent } from './header/header.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { ExpiredComponent } from './expired/expired.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignupComponent,\n    HomeComponent,\n    ProfileComponent,\n    HeaderComponent,\n    ForgotPasswordComponent,\n    ChangePasswordComponent,\n    ExpiredComponent\n  ],\n  imports: [\n    SlimLoadingBarModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatSliderModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatSelectModule,\n    MatInputModule,\n    MatTableModule,\n    MatAutocompleteModule,\n    MatRadioModule,\n    MatIconModule,\n    MatNativeDateModule,\n    MatProgressBarModule,\n    MatDatepickerModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatSnackBarModule,\n    MatExpansionModule,\n    MatTabsModule,\n    MatTooltipModule,\n    MatDialogModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    ToastrModule.forRoot()\n  ],\n  providers: [AngularLoginService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl, FormGroupDirective, NgForm, Validators, FormBuilder, FormGroup\n} from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AngularLoginService } from '../angular-login.service';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private toastr: ToastrService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private service: AngularLoginService\n  ) { }\n  changePwdForm: FormGroup\n  matcher = new MyErrorStateMatcher();\n\n  pwdChangeForm() {\n\n    this.changePwdForm = this.formBuilder.group({\n      password: [null,\n        Validators.compose([\n          Validators.required, Validators.minLength(6),\n        ])\n      ],\n      password2: [null,\n        Validators.compose([\n          Validators.required, Validators.minLength(6),\n        ])\n      ]\n    })\n\n\n  }\n  submit() {\n    if (!this.changePwdForm.valid) {\n      // this.toastr.error('Please Fill All Fields')\n    } else {\n\n      this.service.pwdChange(this.changePwdForm.value).subscribe((data: any) => {\n        if (data.message == \"success\") {\n          this.toastr.success('Password changes Successfully...');\n          this.router.navigate([\"/\"]);\n        } else {\n          this.toastr.error('Failed...', data[0].msg)\n        }\n        (err) => {\n          this.toastr.error('Failed...', err)\n        };\n      });\n    }\n\n  }\n\n\n  ngOnInit(): void {\n    this.pwdChangeForm()\n  }\n\n}\n","<div class=\"resetpassword-form\">\n    <mat-card>\n        <h1><mat-card-title class=\"text-primary\">Password Reset</mat-card-title></h1><br>\n    <mat-card-content>\n    <form [formGroup]=\"changePwdForm\">\n        <div>           \n         \n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n                <mat-label>Password<span style=\"color: red\">*</span></mat-label>\n    \n                <input type=\"password\" matInput placeholder=\"Enter Password\" formControlName=\"password\" [errorStateMatcher]=\"matcher\" />\n                <mat-error>\n                    <div *ngIf=\"(!changePwdForm.get('password').valid && changePwdForm.get('password').touched) || changePwdForm.get('password').dirty\">\n                        <h4> <span class=\"error-message\" *ngIf=\"changePwdForm.get('password').errors?.required\"> Please\n                            enter password</span>\n                     <span class=\"error-message\" *ngIf=\"changePwdForm.get('password').errors?.minlength\"> Password length should greater than seven</span></h4>\n                    </div>\n                    <!-- <span\n                              *ngIf=\"(!customerform.get('emailvalue').valid && customerform.get('emailvalue').touched)\">Please enter email</span>\n                              <span class=\"error-message\" *ngIf=\"customerform.get('emailvalue').dirty\"> & email is invalid</span>  -->\n    \n                </mat-error>\n            </mat-form-field><br><br>\n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n                <mat-label>Confirm Password<span style=\"color: red\">*</span></mat-label>\n    \n                <input type=\"password\" matInput placeholder=\"Enter Confirm Password\" formControlName=\"password2\" [errorStateMatcher]=\"matcher\" />\n                <mat-error>\n                    <div *ngIf=\"(!changePwdForm.get('password2').valid && changePwdForm.get('password2').touched) || changePwdForm.get('password2').dirty\">\n                        <h4> <span class=\"error-message\" *ngIf=\"changePwdForm.get('password2').errors?.required\"> Please\n                            enter confirm password</span>\n                    <span class=\"error-message\" *ngIf=\"changePwdForm.get('password2').errors?.minlength\"> Password length should greater than seven</span></h4>\n                    </div>\n                    <!-- <span\n                              *ngIf=\"(!customerform.get('emailvalue').valid && customerform.get('emailvalue').touched)\">Please enter email</span>\n                              <span class=\"error-message\" *ngIf=\"customerform.get('emailvalue').dirty\"> & email is invalid</span>  -->\n    \n                </mat-error>\n            </mat-form-field>\n           \n        </div>\n       \n    \n        \n    \n    </form>\n    \n    </mat-card-content>\n    <button mat-raised-button color=\"primary\" (click)=\"submit()\" class=\"btn-space\">Change Password</button>\n    <button mat-raised-button color=\"primary\" [routerLink]=\"['/']\">Cancel</button>\n    </mat-card>\n    </div>","import { AngularLoginService } from './../angular-login.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-expired',\n  templateUrl: './expired.component.html',\n  styleUrls: ['./expired.component.scss']\n})\nexport class ExpiredComponent implements OnInit {\n  forgotemail: String;\n  email: String;\n  constructor(\n    private route: ActivatedRoute,\n    private toastr: ToastrService,\n    private service: AngularLoginService\n\n  ) { }\n\n  ngOnInit(): void {\n\n    this.route.queryParams.subscribe(params => {\n      if (params.email) {\n        this.email = params.email\n        this.toastr.info('Verify Email Link Expired click Resent Email !!');\n      }\n      if (params.forgotemail) {\n        this.forgotemail = params.forgotemail\n        this.toastr.info('Verify Password Link Expired Resent Email !!');\n      }\n    });\n  }\n\n  resendForgotEmail() {\n    this.service.forgotPwd(this.forgotemail).subscribe((data: any) => {\n      if (data.data[0]) {\n        this.toastr.success('Forgot Password Link sent to your mail id...');\n      } else {\n        this.toastr.error('Failed...', data.err)\n      }\n      (err) => {\n        this.toastr.error('Failed...', err)\n      };\n    });\n\n  }\n  resendVerifyEmail() {\n    this.service.resentmail(this.email).subscribe((data: any) => {\n      if (data.data[0]) {\n        this.toastr.success('Verify Email Link sent to your mail id...');\n      } else {\n        this.toastr.error('Failed...', data.err)\n      }\n      (err) => {\n        this.toastr.error('Failed...', err)\n      };\n    });\n  }\n\n}\n","<div style=\"margin-left: 30%; margin-right: 30%; margin-top: 15%;\">\n    <p class=\"text-justify text-primary\">\n      Your Link has Expired Please Click Resent Email Button\n    </p>\n   \n    <button\n    *ng-If=\"forgotemail; else next\"\n      type=\"button\"\n      (click)=\"resendForgotEmail()\"\n      class=\"btn btn-primary\"\n    >\n      Resent Email\n    </button>\n    <button #next\n      type=\"button\"\n      (click)=\"resendVerifyEmail()\"\n      class=\"btn btn-primary\"\n    >\n      Resent Email\n    </button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl, FormGroupDirective, NgForm, Validators, FormBuilder, FormGroup\n} from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AngularLoginService } from '../angular-login.service';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotForm: FormGroup;\n\n  constructor(\n    private toastr: ToastrService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private service: AngularLoginService) { }\n\n  ngOnInit(): void {\n    this.forgotform()\n\n  }\n  matcher = new MyErrorStateMatcher();\n\n  forgotform() {\n\n    this.forgotForm = this.formBuilder.group({\n      email: [null,\n        Validators.compose([\n          Validators.required,\n          Validators.email,\n          Validators.pattern(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$\"),\n        ]),\n      ]\n    })\n\n\n  }\n  submit() {\n    if (!this.forgotForm.valid) {\n      this.toastr.error('Please Fill All Fields')\n    } else {\n\n      this.service.forgotPwd(this.forgotForm.value).subscribe((data: any) => {\n        if (data[1]) {\n          this.toastr.success('Forgot Password Link sent to your mail id...');\n        } else {\n          this.toastr.error('Failed...', data.err)\n        }\n        (err) => {\n          this.toastr.error('Failed...', err)\n        };\n      });\n    }\n\n  }\n\n\n\n}\n","<div class=\"forgot-form\">\n    <mat-card>\n        <h1><mat-card-title class=\"text-primary\">Forgot Password</mat-card-title></h1><br>\n    <mat-card-content>\n    <form [formGroup]=\"forgotForm\">\n        <div>\n    \n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n                <mat-label>Email<span style=\"color: red\">*</span></mat-label>\n    \n                <input type=\"email\" matInput placeholder=\"Enter Email\" formControlName=\"email\" [errorStateMatcher]=\"matcher\" />\n                \n            </mat-form-field>\n            <mat-error>\n                <div *ngIf=\"(!forgotForm.get('email').valid && forgotForm.get('email').touched) || forgotForm.get('email').dirty\">\n                   <h4> <span class=\"error-message\" *ngIf=\"forgotForm.get('email').errors?.required\"> Please\n                        enter email</span>\n                    <span class=\"error-message\" *ngIf=\"forgotForm.get('email').errors?.pattern\"> Please\n                        enter valid email</span></h4>\n                </div>\n                \n            </mat-error>\n           \n        </div>\n       \n    \n        \n    \n    </form>\n    \n    </mat-card-content>\n    <button mat-raised-button color=\"primary\" (click)=\"submit()\" class=\"btn-space\" >Submit</button>\n    <button mat-raised-button color=\"primary\" [routerLink]=\"['/']\">Login</button>\n    </mat-card>\n    </div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<ul\nclass=\"nav justify-content-center\"\nstyle=\"margin-left: 30%; margin-right: 30%; margin-top: 20px;\"\n>\n<li class=\"nav-item\">\n <h1> <a class=\"nav-link active\" [routerLink]=\"['/home']\" >Home</a></h1>\n</li>\n<li class=\"nav-item\">\n <h1> <a class=\"nav-link\" [routerLink]=\"['/profile']\" >Profile</a></h1>\n</li>\n<li class=\"nav-item\">\n <h1> <a class=\"nav-link\" [routerLink]=\"['/']\">logout</a></h1>\n</li>\n</ul>\n<router-outlet></router-outlet>","import { Router } from '@angular/router';\nimport { AngularLoginService } from './../angular-login.service';\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  data: any = [];\n\n  constructor(private service: AngularLoginService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.service.user.length > 0) {\n      this.data = this.service.user[1];\n    } else {\n      this.router.navigate(['/']);\n    }\n  }\n\n}\n","<div class=\"text-center\">\n      <div style=\"margin-left: 30%; margin-right: 30%; margin-top: 15%;\">\n        <h1 class=\"text-secondary\">WELCOME</h1>\n        <h4 class=\"text-primary\">{{data.userName}}\n        </h4>\n      </div>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl, FormGroupDirective, NgForm, Validators, FormBuilder, FormGroup\n} from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AngularLoginService } from '../angular-login.service';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  matcher = new MyErrorStateMatcher();\n  loginForm: FormGroup;\n  constructor(\n    private formBuilder: FormBuilder,\n    private toastr: ToastrService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private service: AngularLoginService\n  ) {\n\n  }\n  loginform() {\n\n    this.loginForm = this.formBuilder.group({\n      email: [null,\n        Validators.compose([\n          Validators.required,\n          Validators.email,\n          Validators.pattern(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$\"),\n        ]),\n      ],\n      password: [null,\n        Validators.compose([\n          Validators.required, Validators.minLength(6),\n        ])\n      ]\n    })\n\n\n  }\n  submit() {\n    if (!this.loginForm.valid) {\n      this.toastr.error('Please Fill All Fields')\n    } else {\n\n      this.service.login(this.loginForm.value).subscribe((data: any) => {\n        if (data[1]) {\n          this.service.user = [];\n          this.toastr.success('Login Success...');\n          this.service.user = data;\n          this.router.navigate([\"/home\"]);\n        } else if (data.message) {\n          this.toastr.error('Invalid Email/Password...', data.err)\n        }\n        (err) => {\n          this.toastr.error('Failed...', err)\n        };\n      });\n    }\n\n  }\n\n\n  ngOnInit(): void {\n    this.loginform();\n    this.route.queryParams.subscribe(params => {\n      if (params.msg === \"success\") {\n        this.toastr.success('Email Verified Successfully');\n\n      }\n    });\n\n  }\n\n}\n","<div class=\"login-form\">\n<mat-card>\n    <h1><mat-card-title class=\"text-primary\">Login</mat-card-title></h1><br>\n<mat-card-content>\n<form [formGroup]=\"loginForm\">\n    <div>\n\n        <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n            <mat-label>Email<span style=\"color: red\">*</span></mat-label>\n\n            <input type=\"email\" matInput placeholder=\"Enter Email\" formControlName=\"email\" [errorStateMatcher]=\"matcher\" />\n            \n        </mat-form-field>\n        <mat-error>\n            <div *ngIf=\"(!loginForm.get('email').valid && loginForm.get('email').touched) || loginForm.get('email').dirty\">\n               <h4> <span class=\"error-message\" *ngIf=\"loginForm.get('email').errors?.required\"> Please\n                    enter email</span>\n                <span class=\"error-message\" *ngIf=\"loginForm.get('email').errors?.pattern\"> Please\n                    enter valid email</span></h4>\n            </div>\n            \n        </mat-error>\n     \n        <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n            <mat-label>Password<span style=\"color: red\">*</span></mat-label>\n\n            <input type=\"password\" matInput placeholder=\"Enter Password\" formControlName=\"password\" [errorStateMatcher]=\"matcher\" />\n            \n        </mat-form-field>\n        <mat-error>\n            <div *ngIf=\"(!loginForm.get('password').valid && loginForm.get('password').touched) || loginForm.get('password').dirty\">\n                <h4> <span class=\"error-message\" *ngIf=\"loginForm.get('password').errors?.required\"> Please\n                    enter password</span>\n                <span class=\"error-message\" *ngIf=\"loginForm.get('password').errors?.minlength\"> Password length should greater than seven</span></h4>\n            </div>\n           \n        </mat-error>\n       \n    </div>\n   \n\n    \n\n</form>\n\n</mat-card-content>\n<button mat-raised-button color=\"primary\" (click)=\"submit()\" class=\"btn-space\" >Login</button>\n<button mat-raised-button color=\"primary\" [routerLink]=\"['/signup']\">SignUp</button>\n<p class=\" text-primary\">\n    <a [routerLink]=\"['/forgot']\" class=\"text-right\"><h3>ForgotPassword?</h3></a>\n  </p>\n</mat-card>\n</div>\n\n","import { Router } from '@angular/router';\nimport { AngularLoginService } from './../angular-login.service';\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  data: any = [];\n  constructor(private service: AngularLoginService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.service.user.length > 0) {\n      this.data = this.service.user[1];\n    } else {\n      this.router.navigate(['/']);\n    }\n  }\n\n}\n","<div>\n<mat-card class=\"profile\" dynamicHeight>\n<mat-tab-group mat-stretch-tabs>\n    <mat-tab label=\"User Name\"> <span class=\"btn btn-primary\"> {{data.userName| uppercase}}</span> </mat-tab>\n    <mat-tab label=\"Email\"><span class=\"btn btn-primary\">{{data.email }}</span> </mat-tab>\n    <mat-tab label=\"Mobie Number\"> <span class=\"btn btn-primary\">{{data.mobile}}</span> </mat-tab>\n  </mat-tab-group>\n</mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl, FormGroupDirective, NgForm, Validators, FormBuilder, FormGroup\n} from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { AngularLoginService } from '../angular-login.service';\nimport { ToastrService } from 'ngx-toastr';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n  matcher = new MyErrorStateMatcher();\n\n  signUpForm: FormGroup\n  constructor(\n    private formBuilder: FormBuilder,\n    private service: AngularLoginService,\n    private toastr: ToastrService,\n\n  ) { this.signupForm() }\n  signupForm() {\n\n    this.signUpForm = this.formBuilder.group({\n      userName: [null,\n        Validators.compose([\n          Validators.required, Validators.minLength(3),\n        ])\n      ],\n      email: [null,\n        Validators.compose([\n          Validators.required,\n          Validators.email,\n          Validators.pattern(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$\"),\n        ]),\n      ],\n      password: [null,\n        Validators.compose([\n          Validators.required, Validators.minLength(6),\n        ])\n      ],\n      mobile: [\n        \"\",\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(10),\n          Validators.pattern(\"^\\\\d*$\"),\n        ]),],\n      password2: [null,\n        Validators.compose([\n          Validators.required, Validators.minLength(6),\n        ])\n      ],\n\n    })\n\n\n  }\n  submit() {\n    if (!this.signUpForm.valid) {\n      this.toastr.error('Please Fill All Fields')\n    } else {\n      this.service.addUser(this.signUpForm.value).subscribe((res: any) => {\n        if (res.data) {\n          this.signUpForm.reset();\n          this.toastr.success('Verify Mail sent to your mail id...');\n        } else {\n          this.toastr.error('Failed...', res.err[0].msg)\n        }\n      });\n      (error) => {\n        this.toastr.error('Failed...', error)\n      };\n    }\n  }\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"Signup-form\">\n    <mat-card>\n        <h1><mat-card-title class=\"text-primary\">SignUp</mat-card-title></h1><br>\n    <mat-card-content>\n    <form [formGroup]=\"signUpForm\">\n        <div>\n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width\">\n                <mat-label>User Name<span style=\"color: red\">*</span></mat-label>\n\n                <input matInput placeholder=\"Enter Name\" formControlName=\"userName\" [errorStateMatcher]=\"matcher\" />\n                <mat-error>\n                  <h4>  <span *ngIf=\"!signUpForm.get('userName').valid &&\n                        signUpForm.get('userName').touched\">Please\n                        enter User name</span></h4>\n                </mat-error>\n            </mat-form-field><br><br>\n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n                <mat-label>Email<span style=\"color: red\">*</span></mat-label>\n    \n                <input type=\"email\" matInput placeholder=\"Enter Email\" formControlName=\"email\" [errorStateMatcher]=\"matcher\" />\n                <mat-error>\n                    <div *ngIf=\"(!signUpForm.get('email').valid && signUpForm.get('email').touched) || signUpForm.get('email').dirty\">\n                       <h4> <span class=\"error-message\" *ngIf=\"signUpForm.get('email').errors?.required\"> Please\n                            enter email</span></h4>\n                       <h4> <span class=\"error-message\" *ngIf=\"signUpForm.get('email').errors?.pattern\"> Please\n                            enter valid email</span></h4>\n                    </div>\n                    <!-- <span\n                              *ngIf=\"(!customerform.get('emailvalue').valid && customerform.get('emailvalue').touched)\">Please enter email</span>\n                              <span class=\"error-message\" *ngIf=\"customerform.get('emailvalue').dirty\"> & email is invalid</span>  -->\n    \n                </mat-error>\n            </mat-form-field><br><br>\n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n                <mat-label>Password<span style=\"color: red\">*</span></mat-label>\n    \n                <input type=\"password\" matInput placeholder=\"Enter Password\" formControlName=\"password\" [errorStateMatcher]=\"matcher\" />\n                <mat-error>\n                    <div *ngIf=\"(!signUpForm.get('password').valid && signUpForm.get('password').touched) || signUpForm.get('password').dirty\">\n                        <h4> <span class=\"error-message\" *ngIf=\"signUpForm.get('password').errors?.required\"> Please\n                            enter password</span></h4>\n                      <h4>  <span class=\"error-message\" *ngIf=\"signUpForm.get('password').errors?.minlength\"> Password length should greater than seven</span></h4>\n                    </div>\n                    <!-- <span\n                              *ngIf=\"(!customerform.get('emailvalue').valid && customerform.get('emailvalue').touched)\">Please enter email</span>\n                              <span class=\"error-message\" *ngIf=\"customerform.get('emailvalue').dirty\"> & email is invalid</span>  -->\n    \n                </mat-error>\n            </mat-form-field><br><br>\n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width col-lg-4\">\n                <mat-label>Confirm Password<span style=\"color: red\">*</span></mat-label>\n    \n                <input type=\"password\" matInput placeholder=\"Enter Confirm Password\" formControlName=\"password2\" [errorStateMatcher]=\"matcher\" />\n                <mat-error>\n                    <div *ngIf=\"(!signUpForm.get('password2').valid && signUpForm.get('password2').touched) || signUpForm.get('password2').dirty\">\n                        <h4> <span class=\"error-message\" *ngIf=\"signUpForm.get('password2').errors?.required\"> Please\n                            enter confirm password</span></h4>\n                      <h4>  <span class=\"error-message\" *ngIf=\"signUpForm.get('password2').errors?.minlength\"> Password length should greater than seven</span></h4>\n                    </div>\n                    <!-- <span\n                              *ngIf=\"(!customerform.get('emailvalue').valid && customerform.get('emailvalue').touched)\">Please enter email</span>\n                              <span class=\"error-message\" *ngIf=\"customerform.get('emailvalue').dirty\"> & email is invalid</span>  -->\n    \n                </mat-error>\n            </mat-form-field><br><br>\n            <mat-form-field appearance=\"fill\" class=\"mat-form-field-fluid example-full-width\">\n                <mat-label>Mobile Number<span style=\"color: red\">*</span></mat-label>\n\n                <input matInput placeholder=\"Mobile Number\" placeholder=\"Enter a Mobile Number\" formControlName=\"mobile\" [errorStateMatcher]=\"matcher\" />\n                <mat-error>\n                  <h4>  <span *ngIf=\"!signUpForm.get('mobile').valid\n                        &&\n                        signUpForm.get('mobile').touched\">Please\n                        enter\n                        number</span></h4>\n                </mat-error>\n            </mat-form-field>\n\n\n           \n        </div>\n       \n    \n        \n    \n    </form>\n    \n    </mat-card-content>\n    <button mat-raised-button color=\"primary\" (click)=\"submit()\" class=\"btn-space\">Submit</button>\n    <button mat-raised-button color=\"primary\" [routerLink]=\"['/']\">Login</button>\n    </mat-card>\n    </div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}